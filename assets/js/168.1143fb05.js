(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{544:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("我们在编写前端项目的时候，经常会遇到跨域的问题，当我们访问后端 API 的 URL 路径时，只要域名、端口或访问协议（如 HTTP 和 HTTPS）有一项不同，就会被浏览器认定为跨域。另外我们也会经常重复编写后端的域名，例如 "),s("code",[t._v("https://example.com/api/some_end_point")]),t._v("，"),s("code",[t._v("https://example.com/api/other_end_point")]),t._v("，针对这两种情况，可以直接用同一个配置来解决，即代理配置。")]),t._v(" "),s("p",[t._v("不管是 Vite 还是 Webpack，这些打包工具都支持设置前端代理，它们能够把对某一段 URL 的访问直接转换成另一个真实的后端 API 地址，这样前后端就视为使用了相同的域名、协议和端口，就避免了跨域的问题，还能避免繁琐的反复编写域名。")]),t._v(" "),s("h2",{attrs:{id:"配置-vite-proxy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置-vite-proxy"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://zxuqian.cn/vite-proxy-config/#%E9%85%8D%E7%BD%AE-vite-proxy",target:"_blank",rel:"noopener noreferrer"}},[t._v("配置 Vite Proxy"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("我们这里以 Vite 的配置为例，来看一下如何给 API 请求设置代理。在 Vite 编写的项目里边，有一个 "),s("code",[t._v("vite.config.js")]),t._v("配置文件，里边是关于 Vite 的配置项，可以在里边配置代理。假如我们前端项目路径为 "),s("code",[t._v("http://localhost:3000")]),t._v("，需要代理所有以 "),s("code",[t._v("/api")]),t._v(" 开头的 API 请求，把它转发到 "),s("code",[t._v("http://localhost:3001")]),t._v("，并且后端的 API 路径中不带 "),s("code",[t._v("/api")]),t._v("前缀，需要自动去掉 "),s("code",[t._v("/api")]),t._v("前缀，如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://zxuqian.cn/assets/images/2021-08-14-21-24-40-d715e811f8d8d9bad706f7fb81c225ff.webp",alt:"img"}})]),t._v(" "),s("p",[t._v("那么可以使用下面这样的配置：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vite.config.js")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" defineConfig "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vite"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("server")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("proxy")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"/api"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("target")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:3001"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("changeOrigin")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("rewrite")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\/api")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("在 vite 导出的配置里边：")]),t._v(" "),s("ul",[s("li",[t._v("添加"),s("code",[t._v("server")]),t._v(" 配置项。")]),t._v(" "),s("li",[t._v("在 "),s("code",[t._v("server")]),t._v("配置项下边添加 "),s("code",[t._v("proxy")]),t._v("配置项，值为一个对象，属性名为要代理的 URL 路径段，值为相关的配置。")]),t._v(" "),s("li",[t._v("这里属性名设置为 "),s("code",[t._v("/api")]),t._v("，来配置转发前端 "),s("code",[t._v("http://localhost:3000/api")]),t._v(" 开头的所有请求路径。")])]),t._v(" "),s("p",[t._v("在 proxy 配置对象中：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("target")]),t._v("，为实际的后端 URL，它会追加到属性名配置的 "),s("code",[t._v("/api")]),t._v(" 这个片段的前面，例如访问 "),s("code",[t._v("/api/some_end_point")]),t._v("会转换为 "),s("code",[t._v("http://localhost:3001/api/some_end_point")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("changeOrigin")]),t._v("，是否改写 origin，设置为 true 之后，就会把请求 API header 中的 origin，改成跟 "),s("code",[t._v("target")]),t._v(" 里边的域名一样了。")]),t._v(" "),s("li",[s("code",[t._v("rewrite")]),t._v(" 可以把请求的 URL 进行重写，这里因为假设后端的 API 路径不带 "),s("code",[t._v("/api")]),t._v(" 段，所以我们使用 "),s("code",[t._v("rewrite")]),t._v("去掉 "),s("code",[t._v("/api")]),t._v("。给 "),s("code",[t._v("rewrite")]),t._v("传递一个函数，函数的参数 "),s("code",[t._v("path")]),t._v("是前端请求的 API 路径，后面直接使用了 replace() 方法，在里面写一个正则表达式，把 "),s("code",[t._v("/api")]),t._v("开头的这一段替换为空。")])]),t._v(" "),s("p",[t._v("这样 vite 的代理就配置好了。在实际前端请求的过程中，就可以直接使用 "),s("code",[t._v("/api/some_endpoint")]),t._v("这样的形式了：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api/posts"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("前面的 http 协议、域名和端口就都可以省略掉了，并且也没有了跨域的问题。")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://zxuqian.cn/vite-proxy-config/#%E5%B0%8F%E7%BB%93",target:"_blank",rel:"noopener noreferrer"}},[t._v("小结"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("前端跨域问题其实是一个安全问题，就是为了防止不同域名的服务之间进行互相访问，以避免恶意程序对后端资源进行非法获取。在开发的时候，我们就可以利用代理来把请求进行代理，把域名等改成一样的，这样就避免了跨越的问题。在 Vite 中设置代理，是在 "),s("code",[t._v("vite.config.js")]),t._v("配置文件里，配置 "),s("code",[t._v("server")]),t._v("属性，并在里边配置 "),s("code",[t._v("proxy")]),t._v("配置项。代理可以配置多个，根据不同的 API 路径去请求不同的后端路径，本文里只配置了一个 "),s("code",[t._v("/api")]),t._v("作为演示。")])])}),[],!1,null,null,null);s.default=n.exports}}]);