(window.webpackJsonp=window.webpackJsonp||[]).push([[339],{714:function(t,s,r){"use strict";r.r(s);var e=r(5),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" dockerfile")]),t._v(" "),s("p",[t._v("上节我们通过 desktop 从 docker hub 拉取了 nginx 的镜像，并把它跑了起来。")]),t._v(" "),s("p",[t._v("跑这个镜像的时候指定了映射的端口、挂载的数据卷、环境变量等。")]),t._v(" "),s("p",[t._v("跑起来的容器就已经有可用的 nginx 服务了。")]),t._v(" "),s("p",[t._v("那如果我们要自己制作一个这样的镜像，怎么做呢？")]),t._v(" "),s("p",[t._v("docker 容器内就是一个独立的系统环境，想想如果在这样一个系统上，要安装 nginx 服务，怎么做呢？")]),t._v(" "),s("p",[t._v("需要执行一些命令、复制一些文件进来，然后启动服务。")]),t._v(" "),s("p",[t._v("制作镜像自然也要进行这样的过程，不过可以自动化。")]),t._v(" "),s("p",[t._v("只要在 dockerfile 里声明要做哪些事情，docker build 的时候就会根据这个 dockerfile 来自动化构建出一个镜像来。")]),t._v(" "),s("p",[t._v("比如这样：")]),t._v(" "),s("div",{staticClass:"language-docker line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-docker"}},[s("code",[s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node:latest")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . .")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm config set registry https://registry.npmmirror.com/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install -g http-server")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 8080")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token instruction"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http-server"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-p"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8080"')]),t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("这些指令的含义如下：")]),t._v(" "),s("ul",[s("li",[t._v("FROM：基于一个基础镜像来修改")]),t._v(" "),s("li",[t._v("WORKDIR：指定当前工作目录")]),t._v(" "),s("li",[t._v("COPY：把容器外的内容复制到容器内")]),t._v(" "),s("li",[t._v("EXPOSE：声明当前容器要访问的网络端口，比如这里起服务会用到 8080")]),t._v(" "),s("li",[t._v("RUN：在容器内执行命令")]),t._v(" "),s("li",[t._v("CMD：容器启动的时候执行的命令")])]),t._v(" "),s("p",[t._v("我们先通过 FROM 继承了 node 基础镜像，里面就有 npm、node 这些命令了。")]),t._v(" "),s("p",[t._v("通过 WORKDIR 指定当前目录。")]),t._v(" "),s("p",[t._v("然后通过 COPY 把 Dockerfile 同级目录下的内容复制到容器内，这里的 . 也就是 /app 目录")]),t._v(" "),s("p",[t._v("之后通过 RUN 执行 npm install，全局安装 http-server")]),t._v(" "),s("p",[t._v("通过 EXPOSE 指定要暴露的端口")]),t._v(" "),s("p",[t._v("CMD 指定容器跑起来之后执行的命令，这里就是执行 http-server 把服务跑起来。")]),t._v(" "),s("p",[t._v("把这个文件保存为 Dockerfile，然后在同级添加一个 index.html")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/GZDKkFMyTRj4N8Q.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"生成镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成镜像"}},[t._v("#")]),t._v(" 生成镜像")]),t._v(" "),s("p",[t._v("然后通过 docker build 就可以根据这个 dockerfile 来生成镜像。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("docker build -t aaa:ccc .\n")])])]),s("p",[t._v("aaa 是镜像名，ccc 是镜像的标签")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/xuOw7tDU1f8Beo9.png",alt:""}})]),t._v(" "),s("p",[t._v("FROM 是继承一个基础镜像，看输出也可以看出来，前面都是 node 镜像的内容，会一层层下载下来。")]),t._v(" "),s("p",[t._v("最后才是本地的我们添加的那些。")]),t._v(" "),s("p",[t._v("这时你在 desktop 的 images 列表里就可以看到这个镜像了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/QGdwEbL8IAeilN4.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"启动镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动镜像"}},[t._v("#")]),t._v(" 启动镜像")]),t._v(" "),s("p",[t._v("然后执行 docker run 把这个镜像跑起来，用 desktop 我们就直接点击 run 按钮了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/h6yxtDIUOsZ7gqo.png",alt:""}})]),t._v(" "),s("p",[t._v("会让你输入这些内容：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/kPZKY5COoIziy6D.png",alt:""}})]),t._v(" "),s("p",[t._v("是不是上节用 nginx 镜像的感觉回来了？这次是我们自己 build 的镜像。")]),t._v(" "),s("p",[t._v("指定容器名、映射的端口、点击 run：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/mdeR4zZICpagSjK.png",alt:""}})]),t._v(" "),s("p",[t._v("然后可以看到容器内的日志，服务启动成功了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/1uiGTWASkpVemNf.png",alt:""}})]),t._v(" "),s("p",[t._v("当然，容器内打印的是 8080 端口，但在容器外要用映射的 8888 端口访问：")]),t._v(" "),s("p",[t._v("访问 "),s("a",{attrs:{href:"http://localhost:8888",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:8888"),s("OutboundLink")],1),t._v(" 就可以看到我们在 html 写的内容了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/30/Z1wtFQGeNSfWich.png",alt:""}})]),t._v(" "),s("p",[t._v("在容器内页打印了一条访问日志：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/nEvgWMxoLYIwNj5.png",alt:""}})]),t._v(" "),s("p",[t._v("至此，我们写的第一个 dockerfile 和 build 出的第一个镜像就跑成功了！")]),t._v(" "),s("p",[t._v("我们在 files 里看看 /app 下是啥内容：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/zS6cIaBELeW3lio.png",alt:""}})]),t._v(" "),s("p",[t._v("双击 index.html，可以看到这就是我们 build 镜像的时候 COPY 进去的文件。")]),t._v(" "),s("h2",{attrs:{id:"挂载数据卷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挂载数据卷"}},[t._v("#")]),t._v(" 挂载数据卷")]),t._v(" "),s("p",[t._v("但是我们想修改静态文件怎么办呢？")]),t._v(" "),s("p",[t._v("进入容器内改太麻烦，不如把这个 /app 目录设置为挂载点吧。")]),t._v(" "),s("p",[t._v("这样改下 Dockerfile：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/NZsMSl3rKn9J2UT.png",alt:""}})]),t._v(" "),s("p",[t._v("然后重新 build 出一个镜像来：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("docker build -t aaa:ddd -f 2.Dockerfile .\n")])])]),s("p",[t._v("因为现在不是默认的 Dockerfile 了，需要用 -f 指定下 dockefile 的文件名。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/2mjeJdFyalcMA3t.png",alt:""}})]),t._v(" "),s("p",[t._v("构建完之后再 run 一下这个新镜像：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/2HRjT8EgnrGvLMF.png",alt:""}})]),t._v(" "),s("p",[t._v("这次我把我的桌面目录作为数据卷挂载到 /app 目录了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/2hE3XdrSJw7OfM4.png",alt:""}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/xBE1PcrabM3Zw4X.png",alt:""}})]),t._v(" "),s("p",[t._v("容器跑起来后可以看到确实挂载上去了，也标识为了 mount：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/w2aUetbjT1dCIfc.png",alt:""}})]),t._v(" "),s("p",[t._v("浏览器访问下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/dCBzQLVX9Nspo27.png",alt:""}})]),t._v(" "),s("p",[t._v("在 inspect 这里也可以看到挂载的目录：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/k2PMUJroBXbyuxe.png",alt:""}})]),t._v(" "),s("p",[t._v("有同学说，就算不在 dockerfile 里指定 VOLUME，我还是可以 docker run 的时候通过 -v 挂载数据卷呀。")]),t._v(" "),s("p",[t._v("那我为啥还要指定 VOLUME？")]),t._v(" "),s("p",[t._v("在 dockerfile 里指定 VOLUME 之后，如果你 docker run 的时候没有带 -v，那会放在一个临时的目录里。")]),t._v(" "),s("p",[t._v("比如我直接点击 run，不设置参数：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/tuWcdPo16l9NBYM.png",alt:""}})]),t._v(" "),s("p",[t._v("docker 会随机给他生成一个名字。")]),t._v(" "),s("p",[t._v("还会随机生成一个目录作为数据卷挂载上去：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/34MHPuBTwxKARom.png",alt:""}})]),t._v(" "),s("p",[t._v("inspect 可以看到这时候的路径是一个临时的目录：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/3TzDHdRaEKML7Zf.png",alt:""}})]),t._v(" "),s("p",[t._v("这样就算你删了容器，数据也可以在这里找回。")]),t._v(" "),s("p",[t._v("设想下，如果你跑了个 mysql 容器，存了很多数据，但是跑容器的时候没指定数据卷。有一天，你把容器删了，所有数据都没了，可不可怕？")]),t._v(" "),s("p",[t._v("为了避免这种情况，mysql 的 dockerfile 里是必须声明 volume 的，这样就算你没通过 -v 指定数据卷，将来也可以找回数据。")]),t._v(" "),s("p",[t._v("在镜像详情可以看到 mysql 的 dockerfile，确实声明了 volume")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/05/29/TPse6dQjiX7tOU8.png",alt:""}})]),t._v(" "),s("p",[t._v("这样就能保证数据不丢失。")]),t._v(" "),s("p",[t._v("dockerfile 在"),s("a",{attrs:{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/docker-test",target:"_blank",rel:"noopener noreferrer"}},[t._v("小册仓库"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("docker 镜像是通过 dockerfile 构建出来的。")]),t._v(" "),s("p",[t._v("我们写了第一个 dockerfile，通过 FROM、WORKDIR、COPY、RUN、EXPOSE、CMD 等指令声明了一个 http-server 提供静态服务的镜像。")]),t._v(" "),s("p",[t._v("docker run 这个镜像就可以生成容器，指定映射的端口、挂载的数据卷、环境变量等。")]),t._v(" "),s("p",[t._v("VOLUME 指令看起来没啥用，但能保证你容器内某个目录下的数据一定会被持久化，能保证没挂载数据卷的时候，数据不丢失。")]),t._v(" "),s("p",[t._v("写完这个 dockerfile，相信你会对 docker 镜像、容器有更具体的理解了。")])])}),[],!1,null,null,null);s.default=a.exports}}]);