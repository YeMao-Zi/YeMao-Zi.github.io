(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{586:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"痛点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#痛点"}},[t._v("#")]),t._v(" 痛点")]),t._v(" "),s("p",[t._v("后端系统中，会有很多对象：")]),t._v(" "),s("ul",[s("li",[t._v("Controller 对象：接收 http 请求，调用 Service，返回响应")]),t._v(" "),s("li",[t._v("Service 对象：实现业务逻辑")]),t._v(" "),s("li",[t._v("Repository 对象：实现对数据库的增删改查")])]),t._v(" "),s("p",[t._v("此外，还有数据库链接对象 DataSource，配置对象 Config 等等。")]),t._v(" "),s("p",[t._v("这些对象有着错综复杂的关系：")]),t._v(" "),s("p",[t._v("Controller 依赖了 Service 实现业务逻辑，Service 依赖了 Repository 来做增删改查，Repository 依赖 DataSource 来建立连接，DataSource 又需要从 Config 对象拿到用户名密码等信息。")]),t._v(" "),s("p",[t._v("这就导致了创建这些对象是很复杂的，你要理清它们之间的依赖关系，哪个先创建哪个后创建。")]),t._v(" "),s("p",[t._v("比如这样：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" config "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("username")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("password")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dataSource "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataSource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" repository "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Repository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dataSource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" service "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("repository"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" controller "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Controller")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("p",[t._v("要经过一系列的初始化之后才可以使用 Controller 对象。")]),t._v(" "),s("p",[t._v("而且像 config、dataSource、repository、service、controller 等这些对象不需要每次都 new 一个新的，一直用一个就可以，也就是保持单例。")]),t._v(" "),s("p",[t._v("在应用初始化的时候，需要理清依赖的先后关系，创建一大堆对象组合起来，还要保证不要多次 new，是不是很麻烦？")]),t._v(" "),s("p",[t._v("没错，这是一个后端系统都有的痛点问题。")]),t._v(" "),s("p",[t._v("解决这个痛点的方式就是 IoC（Inverse of Control）。")]),t._v(" "),s("p",[t._v("java 的 Spring 就实现了 IoC，Nest 也同样实现了。")]),t._v(" "),s("h2",{attrs:{id:"ioc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ioc"}},[t._v("#")]),t._v(" IoC")]),t._v(" "),s("p",[t._v("那什么是 IoC 呢？")]),t._v(" "),s("p",[t._v("之前我们手动创建和组装对象不是很麻烦么，我能不能在 class 上声明依赖了啥，然后让工具去分析我声明的依赖关系，根据先后顺序自动把对象创建好了并组装起来呢？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/vP74tp3oSfcEyml.png",alt:""}})]),t._v(" "),s("p",[t._v("比如这样声明 AppController 依赖了这两个 Service，然后让工具分析依赖自动帮我创建好这三个对象并设置依赖关系。")]),t._v(" "),s("p",[t._v("这就是 IoC 的实现思路。")]),t._v(" "),s("p",[t._v("它有一个放对象的容器，程序初始化的时候会扫描 class 上声明的依赖关系，然后把这些 class 都给 new 一个实例放到容器里。")]),t._v(" "),s("p",[t._v("创建对象的时候，还会把它们依赖的对象注入进去。")]),t._v(" "),s("p",[t._v("这样不就完成了自动的对象创建和组装么？")]),t._v(" "),s("p",[t._v("这种依赖注入的方式叫做 Dependency Injection，简称 DI。")]),t._v(" "),s("p",[t._v("而这种方案为什么叫 IoC 也很容易理解了，本来是手动 new 依赖对象，然后组装起来，现在是声明依赖了啥，等待被注入。")]),t._v(" "),s("p",[t._v("从主动创建依赖到被动等待依赖注入，这就是 Inverse of Control，反转控制。")]),t._v(" "),s("p",[t._v("在 class 上声明依赖的方式，大家都选择了装饰器的方式（在 java 里这种语法叫做注解）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/vM6RL1Gj75Wpwto.png",alt:""}})]),t._v(" "),s("p",[t._v("比如上面就是声明这个 class 要放到 IOC 容器里，然后它的依赖是啥。")]),t._v(" "),s("p",[t._v("这样 IOC 容器扫描到它就知道怎么创建它的对象了。")]),t._v(" "),s("p",[t._v("知道了 IOC 是啥，下面我们来看看真实的 Nest 项目里是怎么用 IoC 的：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npx nest new nest-ioc\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("执行上面的命令，它会创建一个 nest 项目：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/UuHcRsB7pI1m2QE.png",alt:""}})]),t._v(" "),s("p",[t._v("选择一个 npm 包管理工具，然后 nest cli 会自动创建项目结构并安装依赖：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/oeWy5IDAxhkjcUP.png",alt:""}})]),t._v(" "),s("p",[t._v("然后进入这个目录，执行 npm run start，把服务跑起来：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/3PiLBFefd5zGJE8.png",alt:""}})]),t._v(" "),s("p",[t._v("浏览器访问 http://localhost:3000 就可以看到 nest 服务返回的 hello world：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/sw8AN3nI4YP5Oxl.png",alt:""}})]),t._v(" "),s("p",[t._v("我们看看代码里它是怎么创建对象的：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/AGpog7PtWe3Jkbl.png",alt:""}})]),t._v(" "),s("p",[t._v("它有一个 AppService 声明了 @Injectable，代表这个 class 可注入，那么 nest 就会把它的对象放到 IOC 容器里。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/4sDEojmguqyXNCF.png",alt:""}})]),t._v(" "),s("p",[t._v("AppController 声明了 @Controller，代表这个 class 可以被注入，nest 也会把它放到 IoC 容器里。")]),t._v(" "),s("p",[t._v("AppController 的构造器参数依赖了 AppService。")]),t._v(" "),s("p",[t._v("或者这样通过属性的方式声明依赖：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/aUnzlDB83ZL6ViH.png",alt:""}})]),t._v(" "),s("p",[t._v("前者是构造器注入，后者是属性注入，两种都可以。")]),t._v(" "),s("p",[t._v("为什么 Controller 是单独的装饰器呢？")]),t._v(" "),s("p",[t._v("因为 Service 是可以被注入也是可以注入到别的对象的，所以用 @Injectable 声明。")]),t._v(" "),s("p",[t._v("而 Controller 只需要被注入，所以 nest 单独给它加了 @Controller 的装饰器。")]),t._v(" "),s("p",[t._v("然后在 AppModule 里引入：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/x1mF6BhceTz7qPI.png",alt:""}})]),t._v(" "),s("p",[t._v("通过 @Module 声明模块，其中 controllers 是控制器，只能被注入。")]),t._v(" "),s("p",[t._v("providers 里可以被注入，也可以注入别的对象，比如这里的 AppService。")]),t._v(" "),s("p",[t._v("然后在入口模块里跑起来：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/Bp7C3NHDQ9c4Sru.png",alt:""}})]),t._v(" "),s("p",[t._v("那么 nest 就会从 AppModule 开始解析 class 上通过装饰器声明的依赖信息，自动创建和组装对象。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/3Lqnyr7AiIHhjzT.png",alt:""}})]),t._v(" "),s("p",[t._v("所以 AppController 只是声明了对 AppService 的依赖，就可以调用它的方法了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/twH49BukyEsJgIU.png",alt:""}})]),t._v(" "),s("p",[t._v("nest 在背后自动做了对象创建和依赖注入的工作。")]),t._v(" "),s("p",[t._v("nest 还加了模块机制，可以把不同业务的 controller、service 等放到不同模块里。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("nest g module other\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/9afFsn56ClXPZYu.png",alt:""}})]),t._v(" "),s("p",[t._v("会生成如下代码：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/nmS3NOse1VIBcMD.png",alt:""}})]),t._v(" "),s("p",[t._v("用 nest cli 的 generate 命令生成一个模块。")]),t._v(" "),s("p",[t._v("会在 AppModule 里自动 imports 这个模块：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/vi7QfoMD3jsZ9gF.png",alt:""}})]),t._v(" "),s("p",[t._v("当 import 别的模块后，那个模块 exports 的 provider 就可以在当前模块注入了。")]),t._v(" "),s("p",[t._v("比如我们再生成 OtherService：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("nest g service other\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/bUS9u7Cp4vImkiT.png",alt:""}})]),t._v(" "),s("p",[t._v("会生成 Service 的代码：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/K6kAZ37yqSUz59p.png",alt:""}})]),t._v(" "),s("p",[t._v("并自动添加到 OtherModule 的 providers 中：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/GNphfSIy3VeQl14.png",alt:""}})]),t._v(" "),s("p",[t._v("我们改下 OtherService，添加一个方法：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/ZV5nymrj7pbfd6M.png",alt:""}})]),t._v(" "),s("p",[t._v("然后在 OtherModule 里 exports：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/otjpByATZd6qYgH.png",alt:""}})]),t._v(" "),s("p",[t._v("那当 AppModule 引用了 OtherModule 之后，就可以注入它 exports 的 OtherService 了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/FSR9zVTWtKvuJn5.png",alt:""}})]),t._v(" "),s("p",[t._v("我们在 AppService 里注入下：")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" OtherService "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./other/other.service'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Inject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Injectable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@nestjs/common'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Injectable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Inject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OtherService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("otherService")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("OtherService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello World!'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("otherService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("xxx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("把服务跑起来：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm run start:dev\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/aybsiM3BLJUCxYA.png",alt:""}})]),t._v(" "),s("p",[t._v("浏览器访问下，可以看到 AppModule 的 AppService 调用 OtherModule 的 OtherService 成功了：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2025/03/14/lo23OJdqRsagEx6.png",alt:""}})]),t._v(" "),s("p",[t._v("这就是 Nest 的 IoC 机制。")]),t._v(" "),s("p",[t._v("案例代码在"),s("a",{attrs:{href:"https://github.com/QuarkGluonPlasma/nestjs-course-code/tree/main/nest-ioc",target:"_blank",rel:"noopener noreferrer"}},[t._v("小册仓库"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("后端系统有很多的对象，这些对象之间的关系错综复杂，如果手动创建并组装对象比较麻烦，所以后端框架一般都提供了 IoC 机制。")]),t._v(" "),s("p",[t._v("IoC 机制是在 class 上标识哪些是可以被注入的，它的依赖是什么，然后从入口开始扫描这些对象和依赖，自动创建和组装对象。")]),t._v(" "),s("p",[t._v("Nest 里通过 @Controller 声明可以被注入的 controller，通过 @Injectable 声明可以被注入也可以注入别的对象的 provider，然后在 @Module 声明的模块里引入。")]),t._v(" "),s("p",[t._v("并且 Nest 还提供了 Module 和 Module 之间的 import，可以引入别的模块的 provider 来注入。")]),t._v(" "),s("p",[t._v("虽然 Nest 这套实现了 IoC 的模块机制看起来繁琐，但是却解决了后端系统的对象依赖关系错综复杂的痛点问题。")])])}),[],!1,null,null,null);s.default=n.exports}}]);